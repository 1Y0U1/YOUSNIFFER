#!/bin/ruby
require "optparse"
require "colorize"
require 'packetgen'
require 'resolv'

$stderr.reopen(File::NULL, "w")

options = {}

iface = nil
ftp = nil
telnet = nil
ssh = nil 
smb= nil
mysql = nil
rdp = nil   
ldap = nil 


begin
  OptionParser.new do |opts|

   opts.banner = "Usage:ruby yousniffer [options]" 
   opts.on('-i','--interface INTERFACE','Specify Interface') do |interface|
      options[:interface] = interface
       iface = interface
end



   opts.on('-p','--Pass-Cap PASSWORD', 'Capture Password of these ports (Eg: FTP, SSH, TELNET, SMB, MYSQL, RDP,LDAP )') do |pwd|
       options[:password] = true
       ftp = pwd
       telnet = pwd 
       ssh = pwd
       smb = pwd
       mysql = pwd
       rdp = pwd
       ldap = pwd
     end

  opts.separator ""
   opts.on('-a','--all','Capture all protocols packets & login attempt On Your Network') do 
    options[:all] = true
  end

   opts.on('-H','--H','Capture HTTP and HTTPS Traffic') do 
    options[:domain] = true
  end

   opts.on('-d','--domain','Capture HTTPS Traffic with Internal Domain Host Name (Not recommended)') do 
    options[:https] = true
  end

  
   opts.on('-h','--help','Specify Help') do
    puts `figlet YOUSNIFFER`.colorize(:blue).bold
    puts "-"*65
    puts "        YOUSNIFFER - Network Credential Sniffer".colorize(:light_blue).bold
    puts "                Developed by Rubal Sharma (YOU)".colorize(:red).bold
    puts "-" * 65

    puts opts
    puts "                                                         Note: Run it with sudo or with root user".colorize(:red).bold
    exit
  end

  opts.separator ""
  opts.on("Example: ruby yousniffer -i <interface> -a")
  opts.on("Example: ruby yousniffer -i <interface>  -p ftp ")
  opts.on("Example: ruby yousniffer -i <interface> -H")

end.parse!

rescue OptionParser::MissingArgument
  puts "Error: Interface and options Must be Specified"
  exit
end


#check if options is empty or not
if options.empty?
  puts "Use -h for help"
  exit  
end

if options[:interface].nil?  
  puts "Please Specify interface"
  exit
end


def capture_http_and_https_packets(iface)
  puts "[*] Sniffing HTTP & HTTPS traffic on #{iface}......".colorize(:green).bold
  puts ""
  PacketGen.capture(iface: iface, promisc: true) do |pkt|
    next unless pkt.is?('TCP')

    # ----------- HTTP Detection (Port 80) ----------
    if pkt.tcp.dport == 80 || pkt.tcp.sport == 80
      body = pkt.tcp.body.to_s
      if body.start_with?("GET", "POST", "PUT")
        puts "[+] HTTP Request Detected:".colorize(:green).bold
        puts body.lines

        if body.include?("application/x-www-form-urlencoded")
        puts "[+] Form Data Detected!".colorize(:red).bold
        puts body.lines.last
        end
        puts "-" *100
      end

    # ----------- HTTPS Detection (Port 443) ----------
    elsif pkt.tcp.dport == 443 || pkt.tcp.sport == 443
      puts "[+] Encrypted HTTPS Packet Detected:".colorize(:cyan)
      puts "From: #{pkt.ip.src} --> #{pkt.ip.dst}"


      puts "Encrypted payload length: #{pkt.tcp.body.size} bytes"
      puts pkt.tcp.body.lines.first
      puts "-" * 100
    end
  end
end


# Capture FTP passwords
def capture_FTP_passwords(iface)

   puts "[+]Sniffing FTP Credentials......".colorize(:green).bold
   puts ""  
  PacketGen.capture(iface: iface, promisc: true) do |pkt|  
    next unless pkt.is?('TCP')
    next unless pkt.tcp.dport == 21 || pkt.tcp.sport == 21
    next unless pkt.is?('IP')

    body = pkt.tcp.body.to_s.strip
    if body.start_with?('USER') || body.start_with?('PASS')
      puts "From #{pkt.ip.src} --> #{pkt.ip.dst}"
    end

    if body.start_with?('USER')
      puts "[+] FTP Username Detected: #{body}".colorize(:yellow).bold
    elsif body.start_with?('PASS')
      puts "[+] FTP Password Detected: #{body}".colorize(:red).bold
      puts "-" * 100
    end
  end
end

#Capture Telenet Passwords
 def capture_TELNET_passwords(iface)
  puts "[+] Sniffing Telnet Credentials......".colorize(:green).bold
  puts "NOTE: This may show each character two times".colorize(:light_blue)

  buffer = ""

  PacketGen.capture(iface: iface, promisc: true) do |pkt|
    next unless pkt.is?('TCP')
    next unless pkt.tcp.dport == 23 || pkt.tcp.sport == 23
    next unless pkt.is?('IP')
    next unless pkt.tcp.body  # skip empty body

    body = pkt.tcp.body.to_s

    body.each_char do |ch|
      if ch.ord.between?(32, 126)  # printable characters
        buffer += ch
      elsif ch == "\n" || ch == "\r"  # Enter pressed
        unless buffer.empty?
          puts "[Captured] #{buffer}".colorize(:green)
          puts "From #{pkt.ip.src} --> #{pkt.ip.dst}".colorize(:cyan)
          puts "Login Detected"
          puts "-" * 100
          buffer = ""
        end
      end
    end
  end
end
      
     

        

#Capture SSH passwords
           def capture_ssh_passwords(iface)
             puts "[+] Sniffing ssh Credentials but Remember it is encrypted......".colorize(:green).bold
             puts ""
             PacketGen.capture(iface:iface, promisc: true) do |pkt|
              next unless pkt.is?('TCP')
              next unless pkt.tcp.dport == 22 || pkt.tcp.sport == 22
              next unless pkt.is?('IP')
              puts "[*]SSH Login Detected".colorize(:red).bold  
              body = pkt.tcp.body.to_s.strip
              puts "From #{pkt.ip.src} --> #{pkt.ip.dst}"
               puts "Payload Size: #{body.size} bytes".colorize(:cyan)
               puts body.lines.first
               puts "-"*100
             end
           end



     #Capture  SMB Passwords
           def capture_smb_passwords(iface)
            puts "[+] Sniffing SMB Crenddentials but Remember its is encrypted......".colorize(:green).bold
            puts ""
            PacketGen.capture(iface:iface, promisc: true ) do |pkt|
              next unless pkt.is?('TCP')
              next unless pkt.tcp.dport == 445 || pkt.tcp.sport == 445
              next unless pkt.is?('IP')
              if pkt.tcp.body.include?('NTLMSSP')
              puts "[*] SMB Login Detected".colorize(:red).bold
              puts "From #{pkt.ip.src} --> #{pkt.ip.dst}"
              puts "Payload Size: #{pkt.tcp.body.size} bytes".colorize(:cyan)
              puts pkt.tcp.body.lines.first
              puts "-"*100
            end
          end
        end

        
      #Capture MYSQL Passwords
      def capture_mysql_passwords(iface)
        puts "[+] Sniffing MYSQL Credentials but Remember it is encrypted......".colorize(:green).bold
        puts ""
        PacketGen.capture(iface:iface, promisc: true) do |pkt|
          next unless pkt.is?('TCP')
          next unless pkt.tcp.dport == 3306 || pkt.tcp.sport == 3306
          next unless pkt.is?('IP')
          if pkt.tcp.body.include?('mysql_native_password')
            puts "[*] MYSQL Login Detected".colorize(:red).bold
            puts "From #{pkt.ip.src} --> #{pkt.ip.dst}"
            puts "Payloads Size: #{pkt.tcp.body.size} bytes".colorize(:cyan)
            puts pkt.tcp.body
            puts "-"*100
          end
        end
      end


      #Capture RDP Packets
      def capture_rdp_passwords(iface)
      puts "[+] Sniffing RDP Credentials but Remember it is encrypted......".colorize(:green).bold
      puts ""
      PacketGen.capture(iface:iface,promisc: true) do |pkt|
        next unless pkt.is?('TCP')
        next unless pkt.tcp.dport == 3389 || pkt.tcp.sport == 3389
        next unless pkt.is?('IP')
          puts "[*] RDP Login Detected".colorize(:red).bold
          puts "From #{pkt.ip.src} --> #{pkt.ip.dst}"
          puts "Payloads Size: #{pkt.tcp.body.size} bytes".colorize(:cyan)
          puts pkt.tcp.body
          puts "-"*100
        end
      end
    



      #Capture LDAP Packets
        def capture_ldap_passwords(iface)
  puts "[+] Sniffing LDAP packets on interface: #{iface}......".colorize(:green).bold

  PacketGen.capture(iface: iface, promisc: true) do |pkt|
    next unless pkt.is?('TCP')
    next unless pkt.tcp.dport == 389 || pkt.tcp.sport == 389
    next unless pkt.is?('IP')
    payload = pkt.tcp.body.to_s.strip
    puts "[*] LDAP Packet Detected!".colorize(:yellow)
    puts "From: #{pkt.ip.src} --> #{pkt.ip.dst}"
    puts "Payload Size: #{payload.size} bytes".colorize(:cyan)
    puts payload
    puts "-" * 100
  end
end
        

def capture_https_traffic_with_domain(iface)
  puts "[+] Sniffing HTTPS traffic with Domain Name but it can be slow so be Patient (Capture Internal Hostname)......".colorize(:green).bold
  puts ""
  PacketGen.capture(iface: iface, promisc: true) do |pkt|
        next unless pkt.is?('TCP')

     if pkt.tcp.dport == 443 || pkt.tcp.sport == 443
      puts "[+] Encrypted HTTPS Packet Detected:".colorize(:cyan)
      puts "From: #{pkt.ip.src} --> #{pkt.ip.dst}"
      begin
        domain = Resolv.getname(pkt.ip.dst)
         rescue Resolv::ResolvError
        domain = "N/A"
      end
      puts "Domain Name:  #{domain}".colorize(:yellow).bold
      puts "Encrypted payload length: #{pkt.tcp.body.size} bytes"
      puts pkt.tcp.body.lines.first
      puts "-" * 100
    end
 end
end


#Capture https traffic with domain name

if options[:https]
  capture_https_traffic_with_domain(iface)



#Capture HTTP/HTTPS traffic  Function
    elsif options[:domain] 
     capture_http_and_https_packets(iface)
    

#Capture FTP Passwords Function
     elsif options[:password] && ftp.downcase == 'ftp'
      capture_FTP_passwords(iface)
    

#Capture telnet Passowrds Function
      elsif options[:password] && telnet.downcase == 'telnet'
       capture_TELNET_passwords(iface)
     

#Capture ssh Passwords Function
     elsif options[:password] && ssh.downcase == 'ssh'
      capture_ssh_passwords(iface)
    

#Capture smb Passwords Function
elsif options[:password] && smb.downcase == 'smb'
  capture_smb_passwords(iface)


#Capture mysql Passwords Function
elsif options[:password] && mysql.downcase == 'mysql'
  capture_mysql_passwords(iface)



#Capture RDP Passwords Functions 
elsif options[:password] && rdp.downcase == 'rdp'
  capture_rdp_passwords(iface)



#Capture LDAP 
elsif options[:password] && ldap.downcase == 'ldap'
  capture_ldap_passwords(iface)



#Capture all Packets
elsif options[:all]
  puts "[+] Sniffing All Protocols (FTP, SSH, TELNET, SMB, MYSQL, RDP, LDAP)......".colorize(:blue).bold

  threads = []

  threads << Thread.new { capture_FTP_passwords(iface) }
  threads << Thread.new { capture_TELNET_passwords(iface) }
  threads << Thread.new { capture_ssh_passwords(iface) }
  threads << Thread.new { capture_smb_passwords(iface) }
  threads << Thread.new { capture_mysql_passwords(iface) }
  threads << Thread.new { capture_rdp_passwords(iface) }
  threads << Thread.new { capture_ldap_passwords(iface) }
    threads << Thread.new { capture_http_and_https_packets(iface) }


  threads.each(&:join)


else
  puts "ERROR: Missing Options"
  exit
end
